{"version":3,"file":"static/js/428.3d9e5444.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["export const getContacts = state => state.contacts.entities;\nexport const getFilteredContacts = state => state.contacts.filter;\nexport const IsLoading = state => state.contacts.isLoading;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"addBtn\":\"ContactForm_addBtn__CACuJ\",\"input\":\"ContactForm_input__Bl93P\",\"form\":\"ContactForm_form__dhl+T\",\"formBox\":\"ContactForm_formBox__cXiHe\",\"btnName\":\"ContactForm_btnName__ZyQ0h\",\"phonebookTitle\":\"ContactForm_phonebookTitle__DZuBg\",\"contactLabel\":\"ContactForm_contactLabel__vt5it\"};","import { useState } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport style from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name)) {\n      Notiflix.Notify.info(`${name} is already in contacts`);\n      setName('');\n      setNumber('');\n      return;\n    }\n    dispatch(contactsOperations.addContacts({ name, number }));\n    Notiflix.Notify.info('Contact created');\n    setName('');\n    setNumber('');\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n      <div className={style.formBox}>\n        <label htmlFor={nameInputId} className={style.contactLabel}>\n          <p className={style.inputTitle}>Name</p>\n          <input\n            className={style.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id={nameInputId}\n            onChange={handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={numberInputId} className={style.contactLabel}>\n          <p className={style.inputTitle}>Number</p>\n          <input\n            className={style.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            id={numberInputId}\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={style.addBtn}>\n          <span className={style.btnName}>Add contact</span>\n        </button>\n      </div>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"input\":\"Filter_input__N7T3z\",\"filterName\":\"Filter_filterName__Y2kKA\",\"contactsTitle\":\"Filter_contactsTitle__eTnDx\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"userNameStyle\":\"Filter_userNameStyle__Qr-l-\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { filter } from 'redux/contacts/contactsActions';\nimport style from './Filter.module.css';\nimport PropTypes from 'prop-types';\nimport { authSelectors } from 'redux/auth';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(contactsSelectors.getFilteredContacts);\n  const userName = useSelector(authSelectors.getUsername);\n\n  const inputChange = event => {\n    const changeValue = event.target.value;\n    dispatch(filter(changeValue));\n  };\n\n  return (\n    <div className={style.filter}>\n      <h2 className={style.contactsTitle}>\n        {' '}\n        Dear\n        <span className={style.userNameStyle}>{userName},</span> <br /> this is\n        your unique phonebook 🕮 Let's start!\n      </h2>\n      <label className={style.filterLabel}>\n        <p className={style.filterName}>| Find contacts by name |</p>\n        <input\n          className={style.input}\n          type=\"text\"\n          name=\"number\"\n          value={value}\n          onChange={inputChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  inputChange: PropTypes.func,\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactListItem_item__UAAix\",\"removeBtn\":\"ContactListItem_removeBtn__WLqGV\",\"btnName\":\"ContactListItem_btnName__a54hJ\"};","import { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport style from './ContactListItem.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, number, name }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li key={id} className={style.item}>\n      <div>\n        <button\n          type=\"button\"\n          className={style.removeBtn}\n          onClick={() => dispatch(contactsOperations.removeContacts(id))}\n        >\n          <span className={style.btnName}>Delete</span>\n        </button>\n      </div>\n      {name} 🕻 {number}\n    </li>\n  );\n};\n\nContactListItem.protoTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"listWrapper\":\"ContactList_listWrapper__gxhpL\"};","import React from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport style from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const value = useSelector(contactsSelectors.getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch, contacts, value]);\n\n  const getFilteredNames = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(value)\n    );\n  };\n\n  let searchContact = value === '' ? contacts : getFilteredNames();\n\n  return (\n    <div className={style.listWrapper}>\n      {contacts.length > 0 &&\n        searchContact.map(({ id, number, name }) => {\n          return (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          );\n        })}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <Filter />\n      <ContactForm />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["getContacts","state","contacts","entities","getFilteredContacts","filter","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useState","name","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","nameInputId","numberInputId","handleInputChange","event","currentTarget","value","className","style","onSubmit","preventDefault","find","contact","toLowerCase","Notiflix","contactsOperations","addContacts","htmlFor","type","onChange","pattern","title","required","userName","authSelectors","changeValue","target","ContactListItem","onClick","removeContacts","protoTypes","PropTypes","removeContact","useEffect","fetchContacts","searchContact","includes","length","map","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}